plugins {
    id "dev.architectury.loom" version "0.12.0-SNAPSHOT"
    id "maven-publish"
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = "example-forge"

loom {
    silentMojangMappingsLicense()

    forge {
        // mixinConfigs = []

        // dataGen { mod project.mod_id }
    }

    launches {
        data {
            arg "--existing", file("src/main/resources").absolutePath
        }
    }
}

repositories {
    maven { url = "https://maven.lukegrahamlandry.ca" }
    maven { url = 'https://maven.parchmentmc.org' }
}

configurations {
    shadowCommon
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()
    forge "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"

    compileOnly project(":Base-Common")
    compileOnly project(":Packets-Common")
    compileOnly project(":Packets-Forge")
    compileOnly project(":Config-Common")
    compileOnly project(":Config-Forge")
    compileOnly project(":Data-Common")
    compileOnly project(":Data-Forge")

    shadowCommon (project(":Base-Common")) {transitive=false}
    shadowCommon (project(":Packets-Common")) {transitive=false}
    shadowCommon (project(":Packets-Forge")) {transitive=false}
    shadowCommon (project(":Config-Common")) {transitive=false}
    shadowCommon (project(":Config-Forge")) {transitive=false}
    shadowCommon (project(":Data-Common")) {transitive=false}
    shadowCommon (project(":Data-Forge")) {transitive=false}

    modImplementation ("net.tslat.smartbrainlib:SmartBrainLib-Forge:1.4+1.19") {transitive=false}
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    relocate 'ca.lukegrahamlandry.lib', "ca.lukegrahamlandry.examplemod.shadow.wrapperlib"
    mergeServiceFiles()
    append 'META-INF/accesstransformer.cfg'
    classifier "dev-shadow"  // not obfuscated, with shadowed stuff
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null  // obfuscated, with shadowed stuff
}

assemble.dependsOn remapJar
