plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"

    common(project(path: ":example:Example-Common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":example:Example-Common", configuration: "transformProductionFabric")) { transitive false }

    implementation project(path: ":Fabric", configuration: "namedElements")
    common(project(path: ":Common", configuration: "transformProductionFabric")) { transitive false }

    // transformProductionForge is after is does the @ExpectPlatform injections
    // does not exist on :Forge of course because that's not the direction it goes in
    // namedElements on :Common would throw assertion errors on the platform classes
    shadowCommon project(path: ":Common", configuration: "transformProductionFabric")
    shadowCommon project(path: ":Fabric", configuration: "namedElements")
}

processResources {
    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
    inputs.property "fabric.mod.json", project.version
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"  // not obfuscated, with shadowed stuff

    relocate 'ca.lukegrahamlandry.lib', 'ca.lukegrahamlandry.examplemod.shadow.wrapperlib'
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null  // obfuscated, with shadowed stuff
}

task renameJarForPublication(type: Zip, dependsOn: remapJar) {
    from remapJar.archiveFile.map { zipTree(it) }
    extension "jar"
    metadataCharset "UTF-8"
    destinationDirectory = base.libsDirectory
    classifier project.name
}

assemble.dependsOn renameJarForPublication

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}
